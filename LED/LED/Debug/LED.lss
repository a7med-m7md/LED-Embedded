
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000456  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a6  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015d  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030c  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  8a:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDIRECTION>:
#include "regester.h"


void DIO_vsetPINDIRECTION (unsigned char portName , unsigned char bitNumber , unsigned char direction){
	
	switch(portName){
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetPINDIRECTION+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vsetPINDIRECTION+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetPINDIRECTION+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetPINDIRECTION+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetPINDIRECTION+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vsetPINDIRECTION+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetPINDIRECTION+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetPINDIRECTION+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetPINDIRECTION+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetPINDIRECTION+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetPINDIRECTION+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetPINDIRECTION+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetPINDIRECTION+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetPINDIRECTION+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPINDIRECTION+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vsetPINDIRECTION+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetPINDIRECTION+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetPINDIRECTION+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vsetPINDIRECTION+0xe8>
		case 'a':
		case 'A':
			if(direction == 1){
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetPINDIRECTION+0x58>
				set_bit(my_DDRA,bitNumber);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetPINDIRECTION+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetPINDIRECTION+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			}
			else{
				clear_bit(my_DDRA,bitNumber);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDIRECTION+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDIRECTION+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
			}
			break;
		case 'b':
		case 'B':
			if(direction == 1){
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetPINDIRECTION+0x92>
				set_bit(my_DDRB,bitNumber);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetPINDIRECTION+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetPINDIRECTION+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
			}
			else{
				clear_bit(my_DDRB,bitNumber);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDIRECTION+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDIRECTION+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
			}
			break;
		case 'c':
		case 'C':
			if(direction == 1){
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetPINDIRECTION+0xcc>
				set_bit(my_DDRC,bitNumber);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetPINDIRECTION+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetPINDIRECTION+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
			}
			else{
				clear_bit(my_DDRC,bitNumber);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetPINDIRECTION+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetPINDIRECTION+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
			}
			break;
		case 'd':
		case 'D':
			if(direction == 1){
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetPINDIRECTION+0x106>
				set_bit(my_DDRD,bitNumber);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetPINDIRECTION+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetPINDIRECTION+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
			}
			else{
				clear_bit(my_DDRD,bitNumber);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetPINDIRECTION+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetPINDIRECTION+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_write>:
	}
}


void DIO_write(unsigned char portName , unsigned char pinNumber , unsigned char outputValue){
	switch(portName){
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_write+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_write+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_write+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_write+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_write+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_write+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_write+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_write+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_write+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_write+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_write+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_write+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_write+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_write+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_write+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_write+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_write+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_write+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_write+0xe8>
		case 'A':
		case 'a':
			if(outputValue == 1){
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_write+0x58>
				set_bit(my_PORTA,pinNumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_write+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_write+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			}
			else{
				clear_bit(my_PORTA,pinNumber);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(outputValue == 1){
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_write+0x92>
				set_bit(my_PORTB,pinNumber);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
			}
			else{
				clear_bit(my_PORTB,pinNumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(outputValue == 1){
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_write+0xcc>
				set_bit(my_PORTC,pinNumber);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_write+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_write+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
			}
			else{
				clear_bit(my_PORTC,pinNumber);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_write+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_write+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}
			break;
		case 'd':
		case 'D':
			if(outputValue == 1){
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_write+0x106>
				set_bit(my_PORTD,pinNumber);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_write+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_write+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
			}
			else{
				clear_bit(my_PORTD,pinNumber);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_write_port>:
			break;
	}
}

void DIO_write_port(unsigned char portName , unsigned char outputValue){
	switch(portName){
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	d9 f0       	breq	.+54     	; 0x310 <DIO_write_port+0x3a>
 2da:	85 34       	cpi	r24, 0x45	; 69
 2dc:	38 f4       	brcc	.+14     	; 0x2ec <DIO_write_port+0x16>
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	99 f0       	breq	.+38     	; 0x308 <DIO_write_port+0x32>
 2e2:	83 34       	cpi	r24, 0x43	; 67
 2e4:	98 f4       	brcc	.+38     	; 0x30c <DIO_write_port+0x36>
 2e6:	81 34       	cpi	r24, 0x41	; 65
 2e8:	a1 f4       	brne	.+40     	; 0x312 <DIO_write_port+0x3c>
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <DIO_write_port+0x2e>
 2ec:	82 36       	cpi	r24, 0x62	; 98
 2ee:	61 f0       	breq	.+24     	; 0x308 <DIO_write_port+0x32>
 2f0:	83 36       	cpi	r24, 0x63	; 99
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <DIO_write_port+0x24>
 2f4:	81 36       	cpi	r24, 0x61	; 97
 2f6:	69 f4       	brne	.+26     	; 0x312 <DIO_write_port+0x3c>
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <DIO_write_port+0x2e>
 2fa:	83 36       	cpi	r24, 0x63	; 99
 2fc:	39 f0       	breq	.+14     	; 0x30c <DIO_write_port+0x36>
 2fe:	84 36       	cpi	r24, 0x64	; 100
 300:	41 f4       	brne	.+16     	; 0x312 <DIO_write_port+0x3c>
 302:	06 c0       	rjmp	.+12     	; 0x310 <DIO_write_port+0x3a>
		case 'A':
		case 'a':
			my_PORTA = outputValue;
 304:	6b bb       	out	0x1b, r22	; 27
			break;
 306:	08 95       	ret
		case 'b':
		case 'B':
			my_PORTB = outputValue;
 308:	68 bb       	out	0x18, r22	; 24
			break;
 30a:	08 95       	ret
		case 'c':
		case 'C':
			my_PORTC = outputValue;
 30c:	65 bb       	out	0x15, r22	; 21
			break;
 30e:	08 95       	ret
		case 'd':
		case 'D':
			my_PORTD = outputValue;
 310:	62 bb       	out	0x12, r22	; 18
 312:	08 95       	ret

00000314 <main>:

int main(void)
{
    while(1)
    {int count = 0;
	    DIO_vsetPINDIRECTION('A',0,1);
 314:	81 e4       	ldi	r24, 0x41	; 65
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDIRECTION>
	    DIO_vsetPINDIRECTION('A',1,1);
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDIRECTION>
	    DIO_vsetPINDIRECTION('A',2,1);
 328:	81 e4       	ldi	r24, 0x41	; 65
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDIRECTION>
#include "DIO.h"

int main(void)
{
    while(1)
    {int count = 0;
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0

	    while(1)
	    {
		    
		    
		    if(count%2 == 1){
 336:	02 e0       	ldi	r16, 0x02	; 2
 338:	10 e0       	ldi	r17, 0x00	; 0
			    DIO_write('a',2,0);
		    }
		    _delay_ms(1000);
		    
		    if(count==11){
			    count=-1;
 33a:	ee 24       	eor	r14, r14
 33c:	ea 94       	dec	r14
 33e:	fe 2c       	mov	r15, r14

	    while(1)
	    {
		    
		    
		    if(count%2 == 1){
 340:	ce 01       	movw	r24, r28
 342:	b8 01       	movw	r22, r16
 344:	0e 94 02 02 	call	0x404	; 0x404 <__divmodhi4>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 05       	cpc	r25, r1
 34c:	31 f4       	brne	.+12     	; 0x35a <main+0x46>
			    DIO_write('a',0,1);
 34e:	81 e6       	ldi	r24, 0x61	; 97
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 358:	05 c0       	rjmp	.+10     	; 0x364 <main+0x50>
		    }else{
			    DIO_write('a',0,0);
 35a:	81 e6       	ldi	r24, 0x61	; 97
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		    }
		    
		    
		    if(count == 2 || count == 5 ||count == 8 || count == 11 ){
 364:	c2 30       	cpi	r28, 0x02	; 2
 366:	d1 05       	cpc	r29, r1
 368:	49 f0       	breq	.+18     	; 0x37c <main+0x68>
 36a:	c5 30       	cpi	r28, 0x05	; 5
 36c:	d1 05       	cpc	r29, r1
 36e:	31 f0       	breq	.+12     	; 0x37c <main+0x68>
 370:	c8 30       	cpi	r28, 0x08	; 8
 372:	d1 05       	cpc	r29, r1
 374:	19 f0       	breq	.+6      	; 0x37c <main+0x68>
 376:	cb 30       	cpi	r28, 0x0B	; 11
 378:	d1 05       	cpc	r29, r1
 37a:	31 f4       	brne	.+12     	; 0x388 <main+0x74>
			    DIO_write('a',1,1);
 37c:	81 e6       	ldi	r24, 0x61	; 97
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 386:	05 c0       	rjmp	.+10     	; 0x392 <main+0x7e>
		    }else{
			    DIO_write('a',1,0);
 388:	81 e6       	ldi	r24, 0x61	; 97
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
		    }
		    
		    
		    if(count ==3 || count == 7 || count ==11){
 392:	c3 30       	cpi	r28, 0x03	; 3
 394:	d1 05       	cpc	r29, r1
 396:	39 f0       	breq	.+14     	; 0x3a6 <main+0x92>
 398:	c7 30       	cpi	r28, 0x07	; 7
 39a:	d1 05       	cpc	r29, r1
 39c:	21 f0       	breq	.+8      	; 0x3a6 <main+0x92>
 39e:	cb 30       	cpi	r28, 0x0B	; 11
 3a0:	d1 05       	cpc	r29, r1
 3a2:	81 f4       	brne	.+32     	; 0x3c4 <main+0xb0>
 3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <main+0xd0>
			    DIO_write('a',2,1);
 3a6:	81 e6       	ldi	r24, 0x61	; 97
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	99 e6       	ldi	r25, 0x69	; 105
 3b4:	a8 e1       	ldi	r26, 0x18	; 24
 3b6:	81 50       	subi	r24, 0x01	; 1
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	a0 40       	sbci	r26, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0xa2>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0xac>
 3c0:	00 00       	nop
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <main+0xcc>
		    }
		    else{
			    DIO_write('a',2,0);
 3c4:	81 e6       	ldi	r24, 0x61	; 97
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	99 e6       	ldi	r25, 0x69	; 105
 3d2:	a8 e1       	ldi	r26, 0x18	; 24
 3d4:	81 50       	subi	r24, 0x01	; 1
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	a0 40       	sbci	r26, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0xc0>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0xca>
 3de:	00 00       	nop
		    _delay_ms(1000);
		    
		    if(count==11){
			    count=-1;
		    }
		    count++;
 3e0:	21 96       	adiw	r28, 0x01	; 1
	    }
 3e2:	ae cf       	rjmp	.-164    	; 0x340 <main+0x2c>
			    DIO_write('a',1,0);
		    }
		    
		    
		    if(count ==3 || count == 7 || count ==11){
			    DIO_write('a',2,1);
 3e4:	81 e6       	ldi	r24, 0x61	; 97
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_write>
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	99 e6       	ldi	r25, 0x69	; 105
 3f2:	a8 e1       	ldi	r26, 0x18	; 24
 3f4:	81 50       	subi	r24, 0x01	; 1
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	a0 40       	sbci	r26, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0xe0>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0xea>
 3fe:	00 00       	nop
			    DIO_write('a',2,0);
		    }
		    _delay_ms(1000);
		    
		    if(count==11){
			    count=-1;
 400:	e7 01       	movw	r28, r14
 402:	ee cf       	rjmp	.-36     	; 0x3e0 <main+0xcc>

00000404 <__divmodhi4>:
 404:	97 fb       	bst	r25, 7
 406:	09 2e       	mov	r0, r25
 408:	07 26       	eor	r0, r23
 40a:	0a d0       	rcall	.+20     	; 0x420 <__divmodhi4_neg1>
 40c:	77 fd       	sbrc	r23, 7
 40e:	04 d0       	rcall	.+8      	; 0x418 <__divmodhi4_neg2>
 410:	0c d0       	rcall	.+24     	; 0x42a <__udivmodhi4>
 412:	06 d0       	rcall	.+12     	; 0x420 <__divmodhi4_neg1>
 414:	00 20       	and	r0, r0
 416:	1a f4       	brpl	.+6      	; 0x41e <__divmodhi4_exit>

00000418 <__divmodhi4_neg2>:
 418:	70 95       	com	r23
 41a:	61 95       	neg	r22
 41c:	7f 4f       	sbci	r23, 0xFF	; 255

0000041e <__divmodhi4_exit>:
 41e:	08 95       	ret

00000420 <__divmodhi4_neg1>:
 420:	f6 f7       	brtc	.-4      	; 0x41e <__divmodhi4_exit>
 422:	90 95       	com	r25
 424:	81 95       	neg	r24
 426:	9f 4f       	sbci	r25, 0xFF	; 255
 428:	08 95       	ret

0000042a <__udivmodhi4>:
 42a:	aa 1b       	sub	r26, r26
 42c:	bb 1b       	sub	r27, r27
 42e:	51 e1       	ldi	r21, 0x11	; 17
 430:	07 c0       	rjmp	.+14     	; 0x440 <__udivmodhi4_ep>

00000432 <__udivmodhi4_loop>:
 432:	aa 1f       	adc	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	a6 17       	cp	r26, r22
 438:	b7 07       	cpc	r27, r23
 43a:	10 f0       	brcs	.+4      	; 0x440 <__udivmodhi4_ep>
 43c:	a6 1b       	sub	r26, r22
 43e:	b7 0b       	sbc	r27, r23

00000440 <__udivmodhi4_ep>:
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	5a 95       	dec	r21
 446:	a9 f7       	brne	.-22     	; 0x432 <__udivmodhi4_loop>
 448:	80 95       	com	r24
 44a:	90 95       	com	r25
 44c:	bc 01       	movw	r22, r24
 44e:	cd 01       	movw	r24, r26
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
